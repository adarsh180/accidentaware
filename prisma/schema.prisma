generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Using String instead of enum for Role
model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      String   // Changed from Role enum to String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  passwordHash  String?
  fullName      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  orders        Order[]
  ridingHistory RidingHistory[]
  sosContacts   SOSContact[]
  sessions      Session[]
  roles         UserRole[]
  addresses     Address[]
}

model RidingHistory {
  id          String   @id @default(cuid())
  userId      String
  startTime   DateTime
  endTime     DateTime?
  distance    Float
  coordinates String   // Changed from Json to String - will store serialized JSON
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SOSContact {
  id        String   @id @default(cuid())
  userId    String
  name      String
  phone     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  razorpayOrderId   String   @unique
  razorpayPaymentId String   @unique
  amount            Float
  status            String
  items             String   // Changed from Json to String - will store serialized JSON
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  name      String
  address   String
  city      String
  state     String
  pincode   String
  phone     String
  email     String
  landmark  String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
